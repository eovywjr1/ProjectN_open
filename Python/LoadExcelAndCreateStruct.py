import unreal
import pandas as pd
import os
from typing import Dict, List, Tuple

ProjectDir = unreal.SystemLibrary.get_project_directory()
ExcelDir = ProjectDir + "Data/DataExcel"
StructDir = ProjectDir + "Source/ProjectN/Info"

PropertyRowIdentifier = "Property"
PropertyColumnIndex = 0

UnrealTypeMapping = {
            'int': 'int32',
            'string': 'FString',
            'list:int': 'TArray<int32>',
            'list:string': 'TArray<FString>'
}

def CreateStruct(StructPath: str, StructName: str, PropertyAndTypeList: Dict[str, str]):
    headerContent = f"""// Generated by ExcelConverter

#pragma once

#include "CoreMinimal.h"
#include "PNDataTable.h"
#include "{StructName}.generated.h"

USTRUCT()
struct F{StructName} : public FPNDataTable
{{
    GENERATED_USTRUCT_BODY()

private:"""
    for Property, Type in PropertyAndTypeList.items():
        headerContent += f"""
    UPROPERTY()
    {Type} {Property};
"""

    headerContent += """};
"""

    unreal.log_error(StructPath)
    os.makedirs(os.path.dirname(StructPath), exist_ok=True)
    with open(StructPath, 'w', encoding='utf-8') as f:
        f.write(headerContent)

    unreal.log_error(f"{StructPath} 데이터테이블 구조체 생성 완료")

def ProcessConvertExcel() -> bool:
    FileList = os.listdir(ExcelDir)
    ExcelFileList = []

    for File in FileList:
        if File.startswith("_"):
            continue

        if File.endswith(".xlsx"):
            ExcelFileList.append(File)

    LodeadExcelAndWorkSheetNameList = []
    
    for ExcelFileNameAndExtension in ExcelFileList:
        if(ExcelFileNameAndExtension.startswith("~")):
            continue

        unreal.log_error(f"{ExcelFileNameAndExtension} Convert Start")

        try:
            ExcelFilePath = ExcelDir + "/" + ExcelFileNameAndExtension
            LoadedExcel = pd.read_excel(ExcelFilePath, sheet_name=None, header=None)

        except Exception as e:
            unreal.log_error(f"엑셀 파일({ExcelFileNameAndExtension}) 읽기 실패: {str(e)}")
            return False

        for SheetName, SheetData in LoadedExcel.items():
            if SheetData.empty:
                continue

            # SheetName 중복 체크
            for LoadedFileName, LoadedSheetName in LodeadExcelAndWorkSheetNameList:
                if LoadedSheetName == SheetName:
                    unreal.log_error(f"{LoadedFileName} - {LoadedSheetName} 과 {ExcelFileNameAndExtension} - {SheetName}이 중복됩니다. 워크시트 이름을 수정해주세요")
                    return False

            LodeadExcelAndWorkSheetNameList.append((ExcelFileNameAndExtension, SheetName.lower()))

            unreal.log_error(f"{SheetName} 워크시트 Convert Start")

            StructPath = f"{StructDir}/{SheetName}.h"
            if os.path.exists(StructPath):
                continue

            try:
                IsSuccess, PropertyAndTypeList = LoadExcelAndGetPropertyAndType(ExcelFileNameAndExtension, SheetName, SheetData)
                if IsSuccess is False:
                    return False

                CreateStruct(StructPath, SheetName, PropertyAndTypeList)

            except Exception as e:
                unreal.log_error(f"처리 중 에러 발생 {ExcelFileNameAndExtension}: {str(e)}")
                return False
        
        unreal.log_error(f"{ExcelFileNameAndExtension} Convert End")
    
    return True

def LoadExcelAndGetPropertyAndType(ExcelFileNameAndExtension, SheetName, SheetData: pd.DataFrame) -> tuple[bool, dict]:
    PropertyMask = SheetData.iloc[:, 0] == PropertyRowIdentifier
    if not PropertyMask.any():
        unreal.log_error(f"{ExcelFileNameAndExtension} 파일의 {SheetName} 워크시트에 {PropertyColumnIndex} 행에 Property 값이 없습니다. 수정해주세요")
        return False, {}

    PropertyRowIndex = SheetData[PropertyMask].index[0]
    TypeRowIndex = PropertyRowIndex - 1
    StartColIndex = PropertyColumnIndex + 1

    PropertyAndTypeList = {}

    for ColIndex in range(StartColIndex, len(SheetData.columns)):
        Property = SheetData.iloc[PropertyRowIndex, ColIndex]

        if pd.isna(Property):
            continue

        if Property.startswith("_"):
            continue

        Type = SheetData.iloc[TypeRowIndex, ColIndex]
        Type = UnrealTypeMapping.get(str(Type), None)
        if Type is None:
            unreal.log_error(f"{ExcelFileNameAndExtension} 파일의 {SheetName} 워크시트에 {ColIndex} 행에 Type({Type})이 int, string, list:int, list:string이 아닙니다. 수정해주세요")
            return False, {}
        
        PropertyAndTypeList[Property] = Type

    return True, PropertyAndTypeList

def main():
    success = ProcessConvertExcel()
    
    if success:
        unreal.log_warning("Conversion completed successfully")
    else:
        unreal.log_warning("Conversion failed")

if __name__ == "__main__":
    main()